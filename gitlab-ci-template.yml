image: alpine:latest

variables:
  KUBERNETES_VERSION: 1.10.9
  HELM_VERSION: 2.11.0
  DOCKER_DRIVER: overlay2
  MAVEN_OPTS: -Dmaven.repo.local=/root/.m2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

stages:
- build_and_test
- package
- staging
- production
- performance

build_and_test:maven:
  stage: build_and_test
  image: $MVN_BUILD_IMAGE
  script:
  - mvn --batch-mode install
  artifacts:
    paths:
    - target/
  except:
    variables:
    - $IS_NODE_PROJECT

build_and_test:node:
  stage: build_and_test
  cache:
    paths:
    - node_modules/
  image: node:slim
  script:
  - npm install
  - npm run test
  - npm run build
  artifacts:
    paths:
    - build/
  only:
    variables:
    - $IS_NODE_PROJECT

package:
  stage: package
  image: docker:stable-git
  services:
  - docker:stable-dind
  script:
  - build_docker_image
  dependencies:
  - build_and_test:maven
  - build_and_test:node

staging:
  stage: staging
  image: docker:stable-git
  services:
  - docker:stable-dind
  script:
  - prepare_deploy
  - deploy
  environment:
    name: staging
    url: "https://${APP_NAME}-front-${APP_NAME}-staging.ingress.${AUTO_DEVOPS_DOMAIN}"
  only:
    refs:
    - master

production:
  stage: production
  image: docker:stable-git
  services:
  - docker:stable-dind
  when: manual
  allow_failure: false
  script:
  - prepare_deploy
  - deploy
  environment:
    name: production
    url: "https://${APP_NAME}-front-${APP_NAME}-production.ingress.${AUTO_DEVOPS_DOMAIN}"
  only:
    refs:
    - master

performance:
  stage: performance
  image: docker:stable
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - performance
  artifacts:
    paths:
      - performance.json
      - sitespeed-results/
  only:
    refs:
      - branches
    variables:
      - $IS_NODE_PROJECT

# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x

  function build_docker_image() {
    export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
    export CI_APPLICATION_TAG=$(getApplicationTag)
    export DOCKER_HOST='tcp://localhost:2375'

    docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    docker build \
      --build-arg HTTP_PROXY="$HTTP_PROXY" \
      --build-arg http_proxy="$http_proxy" \
      --build-arg HTTPS_PROXY="$HTTPS_PROXY" \
      --build-arg https_proxy="$https_proxy" \
      --build-arg FTP_PROXY="$FTP_PROXY" \
      --build-arg ftp_proxy="$ftp_proxy" \
      --build-arg NO_PROXY="$NO_PROXY" \
      --build-arg no_proxy="$no_proxy" \
      -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
  }

  function prepare_deploy() {

    echo "Installing dependencies..."

    apk add -U openssh openssl curl tar gzip bash ca-certificates git
    curl -L -o /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
    curl -L -O https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk
    apk add glibc-2.28-r0.apk
    rm glibc-2.28-r0.apk

    curl "https://kubernetes-helm.storage.googleapis.com/helm-v${HELM_VERSION}-linux-amd64.tar.gz" | tar zx
    mv linux-amd64/helm /usr/bin/
    mv linux-amd64/tiller /usr/bin/
    helm version --client
    tiller -version

    curl -L -o /usr/bin/kubectl "https://storage.googleapis.com/kubernetes-release/release/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl"
    chmod +x /usr/bin/kubectl
    kubectl version --client

    echo "Checking kubernetes namespace..."

    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"

    echo "Initializing Tiller..."

    export HELM_HOST="localhost:44134"
    tiller -listen ${HELM_HOST} -alsologtostderr > /dev/null 2>&1 &

    if ! helm version --debug; then
      echo "Failed to init Tiller."
      return 1
    fi
  }

  function deploy() {
    export CI_APPLICATION_TAG=$(getApplicationTag)

    git clone $CHART_REPO_URL

    cat ${CHART_REPO_NAME}/versions-${CI_ENVIRONMENT_SLUG}.yaml | tr '\n' '|' | sed -e 's/${CI_PROJECT_NAME}:|  tag:[^|]*|/${CI_PROJECT_NAME}:|  tag: ${CI_APPLICATION_TAG}|/' | tr '|' '\n' > ${CHART_REPO_NAME}/versions-${CI_ENVIRONMENT_SLUG}.yaml.tmp
    cat ${CHART_REPO_NAME}/versions-${CI_ENVIRONMENT_SLUG}.yaml.tmp > ${CHART_REPO_NAME}/versions-${CI_ENVIRONMENT_SLUG}.yaml
    rm -rf ${CHART_REPO_NAME}/versions-${CI_ENVIRONMENT_SLUG}.yaml.tmp

    (cd ${CHART_REPO_NAME}; git add versions-${CI_ENVIRONMENT_SLUG}.yaml; git -c user.name='${APP_NAME}' -c user.email='<>' commit -m "Updated versions-${CI_ENVIRONMENT_SLUG}.yaml: ${CI_PROJECT_NAME}.tag=${CI_APPLICATION_TAG}"; git push || true;)

    helm init --client-only
    helm dependency update --debug --tiller-namespace="$TILLER_NAMESPACE" ${CHART_REPO_NAME}
    helm dependency build --debug --tiller-namespace="$TILLER_NAMESPACE" ${CHART_REPO_NAME}

    helm upgrade --install --debug --wait --namespace="$KUBE_NAMESPACE" --tiller-namespace="$TILLER_NAMESPACE" \
      -f ${CHART_REPO_NAME}/values-${CI_ENVIRONMENT_SLUG}.yaml \
      -f ${CHART_REPO_NAME}/versions-${CI_ENVIRONMENT_SLUG}.yaml \
      "${APP_NAME}-${CI_ENVIRONMENT_SLUG}" ${CHART_REPO_NAME}/
  }

  function performance() {
    export DOCKER_HOST='tcp://localhost:2375'
    export CI_ENVIRONMENT_URL="https://${APP_NAME}-front.${APP_NAME}-production.ingress.${AUTO_DEVOPS_DOMAIN}"
    mkdir gitlab-exporter
    wget -O gitlab-exporter/index.js https://gitlab.com/gitlab-org/gl-performance/raw/10-5/index.js
    mkdir sitespeed-results
    docker run --shm-size=1g --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io:6.3.1 --plugins.add ./gitlab-exporter --outputFolder sitespeed-results "$CI_ENVIRONMENT_URL"
    mv sitespeed-results/data/performance.json performance.json
  }

  function getApplicationTag() {
    git show -s --format=%cd-%h --date=format:'%Y%m%d%H%M%S' $CI_COMMIT_SHA
  }

before_script:
- *auto_devops
