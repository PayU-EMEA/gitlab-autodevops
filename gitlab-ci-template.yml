image: alpine:latest

variables:
  KUBERNETES_VERSION: 1.10.9
  HELM_VERSION: 2.11.0
  DOCKER_DRIVER: overlay2
  MAVEN_OPTS: -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2

stages:
- build_and_test
- package
- staging
- production

build_and_test:maven:
  stage: build_and_test
  cache:
    paths:
    - .m2/
  tags:
  - build-on-staging
  image: maven:3-jdk-11-slim
  script:
  - mvn --batch-mode install
  artifacts:
    paths:
    - target/
  except:
    variables:
    - $IS_NODE_PROJECT

build_and_test:node:
  stage: build_and_test
  cache:
    paths:
    - node_modules/
  tags:
  - build-on-staging
  image: node:slim
  script:
  - npm install
  - npm run test
  - npm run build
  artifacts:
    paths:
    - build/
  only:
    variables:
    - $IS_NODE_PROJECT

package:
  stage: package
  image: docker:stable-git
  services:
  - docker:stable-dind
  tags:
  - build-on-staging
  script:
  - build_docker_image
  dependencies:
  - build_and_test:maven
  - build_and_test:node

staging:
  stage: staging
  tags:
  - build-on-staging
  script:
  - prepare_deploy
  - deploy
  environment:
    name: staging
    url: "https://${CI_PROJECT_NAME}.${APP_NAME}-${CI_ENVIRONMENT_SLUG}.${AUTO_DEVOPS_DOMAIN}"
  only:
    refs:
    - master

production:
  stage: production
  tags:
  - build-on-production
  when: manual
  allow_failure: false
  script:
  - prepare_deploy
  - deploy
  environment:
    name: production
    url: "https://${CI_PROJECT_NAME}.${APP_NAME}-${CI_ENVIRONMENT_SLUG}.${AUTO_DEVOPS_DOMAIN}"
  only:
    refs:
    - master

# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x

  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA

  function build_docker_image() {
    export DOCKER_HOST='tcp://localhost:2375'
    docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    docker build \
      --build-arg HTTP_PROXY="$HTTP_PROXY" \
      --build-arg http_proxy="$http_proxy" \
      --build-arg HTTPS_PROXY="$HTTPS_PROXY" \
      --build-arg https_proxy="$https_proxy" \
      --build-arg FTP_PROXY="$FTP_PROXY" \
      --build-arg ftp_proxy="$ftp_proxy" \
      --build-arg NO_PROXY="$NO_PROXY" \
      --build-arg no_proxy="$no_proxy" \
      -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"

    docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:latest"
    docker push "$CI_APPLICATION_REPOSITORY:latest"

    docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:stable"
    docker push "$CI_APPLICATION_REPOSITORY:stable"
  }

  function prepare_deploy() {

    echo "Installing dependencies..."

    apk add -U openssl openssh curl tar gzip bash ca-certificates git
    curl -L -o /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
    curl -L -O https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk
    apk add glibc-2.28-r0.apk
    rm glibc-2.28-r0.apk

    curl "https://kubernetes-helm.storage.googleapis.com/helm-v${HELM_VERSION}-linux-amd64.tar.gz" | tar zx
    mv linux-amd64/helm /usr/bin/
    mv linux-amd64/tiller /usr/bin/
    helm version --client
    tiller -version

    curl -L -o /usr/bin/kubectl "https://storage.googleapis.com/kubernetes-release/release/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl"
    chmod +x /usr/bin/kubectl
    kubectl version --client

    echo "Checking kubernetes namespace..."

    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"

    echo "Initializing Tiller..."

    export HELM_HOST="localhost:44134"
    tiller -listen ${HELM_HOST} -alsologtostderr > /dev/null 2>&1 &

    if ! helm version --debug; then
      echo "Failed to init Tiller."
      return 1
    fi

    echo "Creating secret..."

    kubectl create secret -n "$KUBE_NAMESPACE" \
      docker-registry gitlab-registry \
      --docker-server="$CI_REGISTRY" \
      --docker-username="${CI_DEPLOY_USER:-$CI_REGISTRY_USER}" \
      --docker-password="${CI_DEPLOY_PASSWORD:-$CI_REGISTRY_PASSWORD}" \
      --docker-email="$GITLAB_USER_EMAIL" \
      -o yaml --dry-run | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
  }

  function deploy() {
    git clone $CHART_REPO_URL

    helm upgrade --install \
      --debug \
      --wait \
      --set image.environment="$CI_ENVIRONMENT_SLUG" \
      --set image.tag="latest" \
      --namespace="$KUBE_NAMESPACE" \
      --tiller-namespace="$TILLER_NAMESPACE" \
      "${APP_NAME}-${CI_ENVIRONMENT_SLUG}" \
      ${CHART_REPO_NAME}/charts/${APP_NAME}-configserver/
    kubectl rollout status -n "${KUBE_NAMESPACE}" -w "deployment/${APP_NAME}-${CI_ENVIRONMENT_SLUG}-${APP_NAME}-configserver"

    helm upgrade --install \
      --debug \
      --wait \
      --namespace="$KUBE_NAMESPACE" \
      --tiller-namespace="$TILLER_NAMESPACE" \
      -f ${CHART_REPO_NAME}/values-${CI_ENVIRONMENT_SLUG}.yaml \
      "${APP_NAME}-${CI_ENVIRONMENT_SLUG}" \
      ${CHART_REPO_NAME}/
    kubectl rollout status -n "${KUBE_NAMESPACE}" -w "deployment/${APP_NAME}-${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_NAME}"
  }

before_script:
- *auto_devops
