image: alpine:latest

variables:
  KUBERNETES_VERSION: 1.10.9
  HELM_VERSION: 2.11.0
  DOCKER_DRIVER: overlay2
  MAVEN_OPTS: -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2

stages:
- build_and_test
- package
- staging
- production

build_and_test:maven:
  stage: build_and_test
  cache:
    paths:
    - .m2/
  image: maven:3-jdk-11-slim
  script:
  - mvn --batch-mode install
  artifacts:
    paths:
    - target/
  except:
    variables:
    - $IS_NODE_PROJECT

build_and_test:node:
  stage: build_and_test
  cache:
    paths:
    - node_modules/
  image: node:slim
  script:
  - npm install
  - npm run test
  - npm run build
  artifacts:
    paths:
    - build/
  only:
    variables:
    - $IS_NODE_PROJECT

package:
  stage: package
  image: docker:stable-git
  services:
  - docker:stable-dind
  script:
  - build_docker_image
  dependencies:
  - build_and_test:maven
  - build_and_test:node

staging:
  stage: staging
  image: docker:stable-git
  services:
  - docker:stable-dind
  script:
  - deploy_staging
  environment:
    name: staging
    url: "https://${CI_PROJECT_NAME}.${APP_NAME}-${CI_ENVIRONMENT_SLUG}.${AUTO_DEVOPS_DOMAIN}"
  only:
    refs:
    - master

production:
  stage: production
  image: docker:stable-git
  services:
  - docker:stable-dind
  when: manual
  allow_failure: false
  script:
  - deploy_production
  environment:
    name: production
    url: "https://${CI_PROJECT_NAME}.${APP_NAME}-${CI_ENVIRONMENT_SLUG}.${AUTO_DEVOPS_DOMAIN}"
  only:
    refs:
    - master

# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x

  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA

  function build_docker_image() {
    export DOCKER_HOST='tcp://localhost:2375'
    docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    docker build \
      --build-arg HTTP_PROXY="$HTTP_PROXY" \
      --build-arg http_proxy="$http_proxy" \
      --build-arg HTTPS_PROXY="$HTTPS_PROXY" \
      --build-arg https_proxy="$https_proxy" \
      --build-arg FTP_PROXY="$FTP_PROXY" \
      --build-arg ftp_proxy="$ftp_proxy" \
      --build-arg NO_PROXY="$NO_PROXY" \
      --build-arg no_proxy="$no_proxy" \
      -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
  }

  function deploy_staging() {
    export DOCKER_HOST='tcp://localhost:2375'
    docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:latest"
    docker push "$CI_APPLICATION_REPOSITORY:latest"

    echo "TODO: Now deployment pipeline should be triggered..."
  }

  function deploy_production() {
    export DOCKER_HOST='tcp://localhost:2375'
    docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:stable"
    docker push "$CI_APPLICATION_REPOSITORY:stable"

    echo "TODO: Now deployment pipeline should be triggered..."
  }

before_script:
- *auto_devops
